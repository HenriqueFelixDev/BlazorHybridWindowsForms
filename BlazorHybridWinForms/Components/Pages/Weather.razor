@page "/weather"

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<MudTable Items="forecasts" Loading="@_loading" LoadingProgressColor="@Color.Info">
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh aria-label="Temperature in Celsius">Temp. (C)</MudTh>
        <MudTh aria-label="Temperature in Farenheit">Temp. (F)</MudTh>
        <MudTh>Summary</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.Date.ToShortDateString()</MudTd>
        <MudTd>@context.TemperatureC</MudTd>
        <MudTd>@context.TemperatureF</MudTd>
        <MudTd>@context.Summary</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private WeatherForecast[] forecasts = [];
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        _loading = false;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
